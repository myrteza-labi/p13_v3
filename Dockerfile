# Utiliser une image officielle de Python
FROM python:3.11-slim

# DÃ©finir le rÃ©pertoire de travail
WORKDIR /app

# Copier les fichiers de dÃ©pendances
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copier l'ensemble du projet dans le conteneur
COPY . .

# âœ… Debug : Affiche le contenu initial de fixtures/lettings.json
RUN echo "=== Contenu initial de fixtures/lettings.json ===" && cat fixtures/lettings.json && echo "=== Fin ==="

# âœ… Ajouter un script pour nettoyer le BOM
RUN echo '\
import glob\n\
for p in glob.glob("fixtures/*.json"):\n\
    with open(p, "rb") as f:\n\
        content = f.read()\n\
    if content.startswith(b"\xef\xbb\xbf"):\n\
        with open(p, "wb") as f_out:\n\
            f_out.write(content.lstrip(b"\xef\xbb\xbf"))\n\
' > remove_bom.py

# âœ… ExÃ©cuter le script de nettoyage BOM
RUN python3 remove_bom.py

# âœ… Debug : Affiche le contenu aprÃ¨s nettoyage BOM
RUN echo '=== Contenu aprÃ¨s nettoyage BOM ===' && cat fixtures/lettings.json && echo "=== Fin ==="

# Exposer le port utilisÃ© par l'application
EXPOSE 8000

# CMD : applique migrations, charge les fixtures, collecte les statics, puis dÃ©marre Gunicorn
CMD ["sh", "-c", "\
    echo 'ðŸ§ª Fichiers JSON prÃ©sents :' && ls -lh fixtures && \
    echo 'ðŸ“„ Contenu de lettings.json :' && cat fixtures/lettings.json && \
    echo 'ðŸš€ MIGRATIONS' && python manage.py migrate --noinput && \
    echo 'ðŸ“¦ LOADDATA' && python manage.py loaddata fixtures/users.json fixtures/lettings.json fixtures/profiles.json && \
    echo 'ðŸ§¹ COLLECTSTATIC' && python manage.py collectstatic --noinput && \
    echo 'ðŸ”¥ Gunicorn Start' && gunicorn oc_lettings_site.wsgi:application --bind 0.0.0.0:8000 --timeout 120
"]
