docker-compose.yml ‚Äì Configuration des services Docker
======================================================

Ce fichier ``docker-compose.yml`` d√©finit les services n√©cessaires pour ex√©cuter le projet Django dans un environnement Docker local.  
Il permet de construire et d'ex√©cuter le conteneur, avec une configuration d√©di√©e √† l'ex√©cution de l'application.

Objectif
--------

Le fichier ``docker-compose.yml`` permet de :

- D√©finir et configurer le service ``web`` pour l'application Django.
- Lancer le projet localement, en ex√©cutant le serveur Django via **Gunicorn**.
- Charger automatiquement les fixtures, appliquer les migrations et collecter les fichiers statiques.

Structure du fichier
--------------------

1. **Version de Docker Compose**

.. code-block:: yaml

   version: '3.8'

Cela sp√©cifie que nous utilisons la version 3.8 de Docker Compose.

2. **Service Web**

.. code-block:: yaml

   services:
     web:
       build: .
       ports:
         - "8000:8000"
       env_file:
         - .env
       command: >
         sh -c "
         echo 'üöÄ MIGRATIONS' &&
         python manage.py migrate --noinput &&
         echo 'üì¶ LOADDATA' &&
         python manage.py loaddata fixtures/users.json fixtures/lettings.json fixtures/profiles.json &&
         echo 'üßπ COLLECTSTATIC' &&
         python manage.py collectstatic --noinput &&
         echo 'üî• Gunicorn Start' &&
         gunicorn oc_lettings_site.wsgi:application --bind 0.0.0.0:8000
         "

### 2.1 **Build du conteneur**

.. code-block:: yaml

   build: .

Le service ``web`` sera construit en utilisant le ``Dockerfile`` situ√© dans le m√™me r√©pertoire.

### 2.2 **Exposition du port**

.. code-block:: yaml

   ports:
     - "8000:8000"

Cela permet d'exposer le port 8000 du conteneur √† l'h√¥te local, pour acc√©der √† l'application √† l'adresse ``http://localhost:8000``.

### 2.3 **Chargement des variables d'environnement**

.. code-block:: yaml

   env_file:
     - .env

Le fichier ``.env`` contient les variables d'environnement n√©cessaires pour la configuration de l'application (comme ``SECRET_KEY``, ``DEBUG``, ``ALLOWED_HOSTS``, etc.).

### 2.4 **Commande de d√©marrage**

La commande ex√©cut√©e √† chaque d√©marrage du service est d√©finie dans ``command`` et comprend les √©tapes suivantes :

- Ex√©cution des migrations : ``python manage.py migrate --noinput`` ;
- Chargement des fixtures (donn√©es initiales) : ``python manage.py loaddata fixtures/...`` ;
- Collecte des fichiers statiques avec ``collectstatic`` ;
- D√©marrage de Gunicorn pour servir l'application : ``gunicorn oc_lettings_site.wsgi:application --bind 0.0.0.0:8000``.

Utilisation
-----------

Pour d√©marrer l'application en local, ex√©cutez la commande suivante :

.. code-block:: bash

   docker-compose up --build

Cette commande va construire le service, d√©marrer le serveur et effectuer les √©tapes n√©cessaires (migrations, chargement des fixtures, collecte des fichiers statiques) avant de lancer l'application avec Gunicorn.

